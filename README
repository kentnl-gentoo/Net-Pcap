README for Net::Pcap 0.03
=========================

The Net::Pcap module is a Perl binding to the LBL pcap(3) packet
capture library.  It is a re-implementation of Peter Lister's
original Net::Pcap version 0.01.

Net::Pcap version 0.03 contains the following improvements over
previous versions:

	- all pcap library functions fully implemented

	- packet header and statistical information passed as
	  perl hashes

	- POD documentation

The source code for the LBL pcap library can be found at
ftp://ftp.ee.lbl.gov/libpcap.tar.Z.  If you're running Linux, there
should be a packaged up version of libpcap available for your system.
Check the nearest mirror site of your favourite distribution.


Installation Notes
==================

If your pcap header files are installed somewhere strange, create the
Makefile using the INC and/or LIBS option.

	$ perl Makefile.PL INC=-I/usr/local/include/pcap \
		LIBS='-L/usr/lib/pcap -lpcap'

Compile the extension as per usual:

	$ make
	$ make test

To install the extension, as root type:

	# make install

A ANSI-compliant compiler is required to compile the extension.  For
most of the tests, root access is required since opening a network
interface in promiscuous mode is a privileged operation.  Some tests
also require a working network interface with traffic on it.  Consult
the source for individual tests for more information.

Net::Pcap has been tested on the following systems, but is likely to
run on many more.

	- Solaris 2.6, gcc 2.8.1
	- Linux 2.2, gcc 2.8.1


Miscellaneous
=============

The original version of Net::Pcap, version 0.01, was written by Peter
Lister <p.lister@cranfield.ac.uk>.

Version 0.02 was created by Bo Adler <thumper@alumni.caltech.edu> and
not uploaded to CPAN.  It can be found at:

http://www.buttsoft.com/~thumper/software/perl/Net-Pcap/

Thanks to David N. Blank-Edelman <dnb@ccs.neu.edu> for testing and
general polishing up of this version of Net::Pcap.

Copyright (c) 1999 Tim Potter. All rights reserved. This program is free 
software; you can redistribute it and/or modify it under the same terms 
as Perl itself.


25/3/99
Tim Potter
tpot@acsys.anu.edu.au
